package Fishing;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Solution {
	static int INT_MAX = 999999;
	static int n, ans;
	static boolean[] visited = new boolean[100];
	static int[][] gates = new int[4][3];

	public static int findRight(int k) {
		for (int i = k + 1; i <= n; i++) {
			if (visited[i] == false) {
				return i;
			}
		}
		return INT_MAX;
	}

	public static int findLeft(int k) {
		for (int i = k; i > 0; i--) {
			if (visited[i] == false) {
				return i;
			}
		}
		return INT_MAX;
	}

	public static void solve(int x, int y, int z, int distance, int cur_gate) {
		if (distance > ans)
			return;
		if (gates[cur_gate][2] == 0) {
			if (cur_gate == x)
				cur_gate = y;
			else if (cur_gate == y)
				cur_gate = z;
			else {
				if (distance < ans)
					ans = distance;
				return;
			}
		}
		int l = findLeft(gates[cur_gate][1]);
		int r = findRight(gates[cur_gate][1]);

		// chi phi
		int costL = Math.abs(gates[cur_gate][1] - l) + 1;
		int costR = Math.abs(gates[cur_gate][1] - r) + 1;
		boolean goRight = true, goLeft = true;
		if (costL > costR)
			goLeft = false;
		if (costR > costL)
			goRight = false;

		if (goLeft) {
			visited[l] = true;
			gates[cur_gate][2]--;
			solve(x, y, z, distance + costL, cur_gate);
			visited[l] = false;
			gates[cur_gate][2]++;
		}

		if (goRight) {
			visited[r] = true;
			gates[cur_gate][2]--;
			solve(x, y, z, distance + costR, cur_gate);
			visited[r] = false;
			gates[cur_gate][2]++;
		}
	}

	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		System.setIn(new FileInputStream("Fishing.txt"));
		Scanner sc = new Scanner(System.in);
		int sbt = sc.nextInt();
		for (int tc = 1; tc <= sbt; tc++) {
			n = sc.nextInt();
			for (int i = 1; i <= 3; i++) {
//				gates[i][1] = sc.nextInt(); lưu vị trí của vào
//				gates[i][2] = sc.nextInt(); lưu số người ở cửa đó
				gates[i][1] = sc.nextInt();
				gates[i][2] = sc.nextInt();
			}

			ans = INT_MAX;
			solve(1, 2, 3, 0, 1);
			solve(1, 3, 2, 0, 1);
			solve(2, 1, 3, 0, 2);
			solve(2, 3, 1, 0, 2);
			solve(3, 1, 2, 0, 3);
			solve(3, 2, 1, 0, 3);
			System.out.println(ans);
		}

	}

}
